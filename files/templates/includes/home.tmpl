{{ define "title" }}Home{{ end }}

{{ define "scripts" }}
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('homepage', () => ({
            search: "",
            entries: [],
            images: [],
            progress: [],

            get filteredEntries() {
                return this.entries.filter(
                    i => i.title.toLowerCase().startsWith(this.search.toLowerCase())
                )
            },

            async init() {
                await this.getProgress()
                await this.refreshLibrary()
            },

            async refreshLibrary() {
                let resp = await apiSeriesList()
                if (resp === undefined) {
                    this.entries = []
                } else if (!resp.success) {
                    this.entries = []
                } else {
                    this.images = []
                    let promises = []
                    resp.entries.sort(entryCompare) // Sort before we bind images to indexes
                    for (let i = 0; i < resp.entries.length; i++) {
                        let img = new Image()
                        promises.push(waitUntilLoad(img))
                        img.src = '/api/series/{0}/cover?thumbnail=true'.format(resp.entries[i].hash)
                        this.images.push(img)
                    }
                    await Promise.all(promises).catch(function(err) {
                        console.error(err.message);
                    })

                    this.entries = resp.entries
                }
            },

            async getProgress() {
                let resp = await apiCatalogProgress()

                if (resp === undefined || !resp.success) {
                    this.progress = []
                } else {
                    this.progress = resp.progress
                    console.log(this.progress)
                }
            },

            calcSeriesProgress(seriesProgress) {
                if (seriesProgress === undefined) {
                    return "Progress: " + stringPercent(0)
                }

                let current = 0
                let total = 0
                for (let i in seriesProgress.tracker) {
                    let p = seriesProgress.tracker[i]
                    current += p.current
                    total += p.total
                }

                return "Progress: " + stringPercent(current / total)
            },
        }))
    })
</script>
{{ end }}

{{ define "content" }}
<div x-data="homepage">
    <template x-if="entries.length > 0">
        <h2>Library</h2>
    </template>
    <template x-if="entries.length === 0">
        <h3>Empty!</h3>
    </template>

    <template x-if="entries.length > 0">
        <div class="searchWrapper">
            <input x-model="search" class="searchbar" placeholder="Search..." type="text">
        </div>
    </template>

    <div class="entriesDiv">
        <template x-for="e in filteredEntries">
            <a style="border-bottom: none;" :href="'/entries/{0}'.format(e.hash)">
                <div class="entry" :style="`flex: 0 1 max(150px, ${images[e.order - 1].naturalWidth}px)`">
                    <img :src="images[e.order - 1].src" style="width: 100%; max-height: 300px">
                    <div style="padding: 9px 16px;" >
                        <h4 style="margin-block: 0.2em" x-text="e.title"></h4>
                        <span x-text="'Entries: {0}'.format(e.entries)"></span><br>
                        <span x-text="calcSeriesProgress(progress[e.hash])"></span>
                    </div>
                </div>
            </a>
        </template>
    </div>
</div>

{{ end }}