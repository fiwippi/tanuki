{{ define "title" }}Edit User{{ end }}

{{ define "scripts" }}
<script type="module">
    import * as API from {{  "/static/js/api.js" }}
    import * as Util from {{  "/static/js/util.js" }}

    document.addEventListener('alpine:init', () => {
        Alpine.data('user_edit', () => ({
            uid: "",
            username: "",
            password: "",
            admin: false,
            showModal: false,
            modalText: "",
            open: false,
            loaded: false,

            async init() {
                const user = {{ user . }}

                this.uid = user.uid
                this.username = user.name
                this.admin = user.type === 'admin';

                let cancel = Util.Animate.DotDotDot("Loading", (str) => this.loadingTxt = str)
                await Util.Sleep(750)
                cancel()

                if (this.uid != "") {
                    this.loaded = true
                } else {
                    this.loadingTxt = "User ID Incorrect"
                }

            },

            async edit() {
                let type = this.admin ? 'admin': 'standard'
                await API.Admin.EditUser(this.uid, this.username, this.password, type)
                    .then(() => {
                        return API.User.IsAdmin()
                    })
                    .then(admin => {
                        console.log("AM ADMIN", admin)
                        if (!admin) {
                            window.location.replace('/')
                        } else {
                            window.location.replace('/admin/users')
                        }
                    })
                    .catch((e) => {
                        this.modalText = 'FAILED'
                        if (e.message != "" && e.message != undefined && e.message != null)
                            this.modalText += ", " + e.message
                        this.showModal = true
                    })
            }
        }))
    })
</script>
{{ end }}

{{ define "content" }}
<div x-data="user_edit">
    <h2>Edit User</h2>

    <p x-text="loadingTxt" style="font-weight: bold" x-show="!loaded"></p>

    <div x-cloak x-show="loaded">
        <!-- Username -->
        <div class="flex--row">
            <h3 class="flex__key--centered flex__key--less-padding">Username:</h3>
            <label class="flex__key--less-padding">
                <input type="text" placeholder="Username" x-model="username">
            </label>
        </div>
        <!-- Password -->
        <div class="flex--row">
            <h3 class="flex__key--centered flex__key--less-padding">New Password:</h3>
            <label class="flex__key--less-padding">
                <input type="password" placeholder="Password" x-model="password">
            </label>
        </div>
        <!-- Admin -->
        <div class="flex--row">
            <h3 class="flex__key--centered flex__key--less-padding">Admin:</h3>
            <label class="flex__key--less-padding">
                <input type="checkbox" x-model="admin">
            </label>
        </div>
    </div>
    <!-- Modal -->
    <div x-cloak>
        <div  x-show="showModal" class="modal">
            <div @click.away="showModal = false" x-show="showModal" x-transition class="modal__content">
                <span class="modal__close-button" @click="showModal = false">&times;</span>
                <h3 x-text="modalText"></h3>
            </div>
        </div>
    </div>
    <!-- Save Button -->
    <button x-cloak x-show="loaded" class="form-button" @click="await edit()">Save</button>
</div>
{{ end }}